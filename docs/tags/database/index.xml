<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on Homeward</title>
    <link>https://lil-q.github.io/tags/database/</link>
    <description>Recent content in database on Homeward</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>{year} © lil-q</copyright>
    <lastBuildDate>Fri, 17 Jul 2020 16:16:51 +0000</lastBuildDate>
    
	<atom:link href="https://lil-q.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySQL</title>
      <link>https://lil-q.github.io/blog/mysql/</link>
      <pubDate>Fri, 17 Jul 2020 16:16:51 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/mysql/</guid>
      <description>/maɪ ˌɛskjuːˈɛl/
一、索引 优势：减少 I/O 次数，加快检索速度；根据索引分组和排序，可以加快分组和排序；
劣势：索引本身也是表，因此会占用存储空间，一般来说，索引表占用的空间的数据表的1.5倍；索引表的维护和创建需要时间成本，这个成本随着数据量增大而增大；构建索引会降低数据表的修改操作（删除，添加，修改）的效率，因为在修改数据表的同时还需要修改索引表。
常见的索引类型有：主键索引、唯一索引、普通索引、全文索引、组合索引
（1）主键索引：即主索引，根据主键 pk_clolum（length）建立索引，不允许重复，不允许空值
ALTER TABLE &#39;table_name&#39; ADD PRIMARY KEY pk_index(&#39;col&#39;)；  （2）唯一索引：用来建立索引的列的值必须是唯一的，允许空值
ALTER TABLE &#39;table_name&#39; ADD UNIQUE index_name(&#39;col&#39;)；  （3）普通索引：用表中的普通列构建的索引，没有任何限制
ALTER TABLE &#39;table_name&#39; ADD INDEX index_name(&#39;col&#39;)；  （4）全文索引：用大文本对象的列构建的索引
ALTER TABLE &#39;table_name&#39; ADD FULLTEXT INDEX ft_index(&#39;col&#39;)；  （5）组合索引：用多个列组合构建的索引，这多个列中的值不允许有空值
ALTER TABLE &#39;table_name&#39; ADD INDEX index_name(&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;)；  1.1 实现原理 1. B+ 数 B 树是一种自平衡的树，能够保持数据有序。当描述一颗 B 树时需要指定它的阶数，阶数表示了一个结点最多有多少个孩子结点，一般用字母 m 表示阶数。当 m 取 2 时，就是我们常见的二叉搜索树。
B+ 树与 B 树通常用于数据库和操作系统的文件系统中。特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入，这与二叉树恰好相反，具体请参考[2]。</description>
    </item>
    
    <item>
      <title>数据库原理</title>
      <link>https://lil-q.github.io/blog/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Thu, 16 Jul 2020 20:30:14 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>就像操作系统屏蔽了硬件访问复杂性那样，数据库屏蔽了数据访问的复杂性。
一、事务 事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。
1.1 ACID 1. 原子性 事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。
回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。
2. 一致性 数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。
3. 隔离性 一个事务所做的修改在最终提交以前，对其它事务是不可见的。
4. 持久性 一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。
系统发生奔溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。
1.2 关系   一致性：保证事务的执行结果正确：
 无并发：事务串行执行，隔离性一定能够满足；只需满足原子性。 有并发：多个事务并行执行，事务不仅要满足隔离性；还需要满足原子性。    持久性：应对系统崩溃。
  二、并发一致性问题 在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。
1. 丢失修改 丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。
例如：T1 和 T2 两个事务都对一个数据进行修改，T1 先修改并提交生效，T2 随后修改，T2 的修改覆盖了 T1 的修改。
2. 读脏数据 读脏数据指在不同的事务下，当前事务可以读到另外事务未提交的数据。
例如：T1 修改一个数据但未提交，T2 随后读取这个数据。如果 T1 撤销了这次修改，那么 T2 读取的数据是脏数据。
3. 不可重复读 不可重复读指在一个事务内多次读取同一数据集合。在这一事务还未结束前，另一事务也访问了该同一数据集合并做了修改，由于第二个事务的修改，第一次事务的两次读取的数据可能不一致。
例如：T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://lil-q.github.io/blog/sql/</link>
      <pubDate>Thu, 16 Jan 2020 13:59:07 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/sql/</guid>
      <description>SQL基础语句快查
一、定义 结构化查询语言（Structured Query Language，SQL）。是一种 ANSI（American National Standards Institute）标准的计算机语言。目的是访问和处理数据库。
二、查询 - SELECT Select 查询某些属性列（specific columns）的语法：
SELECT column（列名）, another_column, … FROM mytable（表名）;  Select 查询所有列：
SELECT * FROM mytable（表名）;  三、条件查询 - WHERE 条件查询语法，WHERE：
SELECT column, another_column, … FROM mytable WHERE condition AND/OR another_condition AND/OR …;  参考下表：
   Operator（关键字） Condition（意思） SQL Example(例子）     =, !=, &amp;lt; &amp;lt;=, &amp;gt;, &amp;gt;= Standard numerical operators 基础的 大于，等于等比较 col_name !</description>
    </item>
    
  </channel>
</rss>