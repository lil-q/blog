<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>source_code on Homeward</title>
    <link>https://lil-q.github.io/tags/source_code/</link>
    <description>Recent content in source_code on Homeward</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>{year} © lil-q</copyright>
    <lastBuildDate>Sat, 12 Jun 2021 16:00:25 +0800</lastBuildDate>
    
	<atom:link href="https://lil-q.github.io/tags/source_code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 并发：CopyOnWriteArrayList</title>
      <link>https://lil-q.github.io/blog/copyonwritearraylist/</link>
      <pubDate>Sat, 12 Jun 2021 16:00:25 +0800</pubDate>
      
      <guid>https://lil-q.github.io/blog/copyonwritearraylist/</guid>
      <description>写时复制（Copy On Write，COW）是一种程序设计领域的优化策略。其核心思想是，当多个调用者同时请求相同资源（如内存或磁盘上的数据）时，他们会共同获取相同指针指向相同的资源，知道某个调用者试图修改该资源，系统才会真正复制一个专用副本（private copy）给该调用者。对专用副本的修改是无法作用到原始资源上的，事实上，原始资源根本没有被发布。
COW 已有很多应用，比如在虚拟内存管理中，一般把共享访问的页面标记为只读，当一个 task 试图向内存中写入数据时，内存管理单元（MMU）抛出一个异常，内核处理该异常时为该 task 分配一份物理内存并复制数据到此内存，重新向 MMU 发出执行该 task 的写操作。Linux 等的文件管理系统也使用了写时复制策略。
Java 中的 CopyOnWriteArrayList 采用 COW 策略实现了线程安全版的 ArrayList。
public class CopyOnWriteArrayList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable { // 同步锁 final transient ReentrantLock lock = new ReentrantLock(); // 私有数组，只能通过 getArray/setArray 发布 // 需要 volatile 修饰满足新数组赋值后的可见性 private transient volatile Object[] array; // final 禁止重写，避免逸出 final Object[] getArray() { return array; } // 同上 final void setArray(Object[] a) { array = a; } // 既然写入总是复制，初始化就没有确定数组大小的必要了 public CopyOnWriteArrayList() { setArray(new Object[0]); } .</description>
    </item>
    
    <item>
      <title>Java：Map</title>
      <link>https://lil-q.github.io/blog/java%E5%9F%BA%E7%A1%80%E4%BA%94/</link>
      <pubDate>Thu, 02 Apr 2020 15:37:30 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/java%E5%9F%BA%E7%A1%80%E4%BA%94/</guid>
      <description>一、Map Map 是一种键-值映射表，当我们调用 put(K key, V value) 方法时，就把 key 和 value 做了映射并放入 Map。当我们调用 V get(K key) 时，就可以通过 key 获取到对应的 value。如果 key 不存在，则返回 null。和 List 类似，Map 也是一个接口，最常用的实现类是 HashMap。
 TreeMap：基于红黑树实现。 HashMap：基于哈希表实现。 HashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。 LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。  1.1 Map 遍历 Map 本身没有实现 Iterable 接口，要遍历 key 可以使用 for each 循环遍历 Map 实例的 keySet() 方法返回的 Set 集合，它包含不重复的 key 的集合：
for (String key : map.keySet()) {...}  同时遍历 key 和 value 可以使用 for each 循环遍历 Map 对象的 entrySet() 集合，它包含每一个 key-value 映射：</description>
    </item>
    
    <item>
      <title>Java：Collection</title>
      <link>https://lil-q.github.io/blog/java%E5%9F%BA%E7%A1%80%E5%9B%9B/</link>
      <pubDate>Mon, 30 Mar 2020 18:34:55 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/java%E5%9F%BA%E7%A1%80%E5%9B%9B/</guid>
      <description>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。【以下内容源码基于 Java 13】
一、Collection 二、List List 接口有几个主要的接口方法：
 在末尾添加一个元素：void add(E e)； 在指定索引添加一个元素：void add(int index, E e)； 删除指定索引的元素：int remove(int index)； 删除某个元素：int remove(Object e)； 获取指定索引的元素：E get(int index)； 获取链表大小（包含元素的个数）：int size()。  List 接口允许我们添加重复的元素，即 List 内部的元素可以重复，List 还允许添加 null。调用 List.of()，它返回的是一个只读 List：
List&amp;lt;Integer&amp;gt; list = List.of(1, 2, 5);  但是 List.of() 方法不接受 null 值，如果传入 null，会抛出 NullPointerException 异常。
2.1 List 遍历 List 的遍历采用了迭代器的设计模式：
Iterable 接口声明如下：
public interface Iterable&amp;lt;T&amp;gt; { Iterator&amp;lt;T&amp;gt; iterator(); }  Iterator 接口声明如下：</description>
    </item>
    
  </channel>
</rss>