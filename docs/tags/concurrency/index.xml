<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrency on Homeward</title>
    <link>https://lil-q.github.io/tags/concurrency/</link>
    <description>Recent content in concurrency on Homeward</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-{year} © lil-q</copyright>
    <lastBuildDate>Sun, 13 Jun 2021 16:30:25 +0800</lastBuildDate>
    
	<atom:link href="https://lil-q.github.io/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 并发：ConcurrentHashMap</title>
      <link>https://lil-q.github.io/blog/concurrenthashmap/</link>
      <pubDate>Sun, 13 Jun 2021 16:30:25 +0800</pubDate>
      
      <guid>https://lil-q.github.io/blog/concurrenthashmap/</guid>
      <description>ConcurrentHashMap（以下简称CHM） 对读取提供了完全的并发支持，对写入提供了高性能的并发支持。在读取数据时，CHM 无需上锁；而在写入数据时，也不用对整个 Map 上锁。
由于读取数据不上锁，读取时可能与写入发生重叠，CHM 只能反映最近完成的写入所产生的结果。与 volatile 类似，这也是符合 happens-before 原则的：如果通过 CHM 读取到某次写入后的值，那么写入前的程序的执行一定先于读取后的程序。
与 CopyOnWriteArrayList 相同，CHM 的迭代器在进行迭代时，不会因为写入或删除操作而报出 ConcurrentModificationException。但是，每次获得的迭代器只能被一个线程所使用，不应当传送给其他线程。一旦一个迭代器被创建，其状态就是确定的（一个快照），类似 size() \ isEmpty() \ containsValue() 等访问实时数据的函数就不能够用来控制程序了。
一、初始化 CHM 中重要的成员变量如下：
public class ConcurrentHashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; implements ConcurrentMap&amp;lt;K,V&amp;gt;, Serializable { // 最大容量，hashcode前两位用作控制，所以最大为1&amp;lt;&amp;lt;30 private static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; // 默认容量 private static final int DEFAULT_CAPACITY = 16; // 负载因子，需要扩容的键值对临界值和容量的比值，默认情况下用 n - (n &amp;gt;&amp;gt;&amp;gt; 2) 实现 private static final float LOAD_FACTOR = 0.</description>
    </item>
    
    <item>
      <title>Java 并发：CopyOnWriteArrayList</title>
      <link>https://lil-q.github.io/blog/copyonwritearraylist/</link>
      <pubDate>Sat, 12 Jun 2021 16:00:25 +0800</pubDate>
      
      <guid>https://lil-q.github.io/blog/copyonwritearraylist/</guid>
      <description>写时复制（Copy On Write，COW）是一种程序设计领域的优化策略。其核心思想是，当多个调用者同时请求相同资源（如内存或磁盘上的数据）时，他们会共同获取相同指针指向相同的资源，知道某个调用者试图修改该资源，系统才会真正复制一个专用副本（private copy）给该调用者。对专用副本的修改是无法作用到原始资源上的，事实上，原始资源根本没有被发布。
COW 已有很多应用，比如在虚拟内存管理中，一般把共享访问的页面标记为只读，当一个 task 试图向内存中写入数据时，内存管理单元（MMU）抛出一个异常，内核处理该异常时为该 task 分配一份物理内存并复制数据到此内存，重新向 MMU 发出执行该 task 的写操作。Linux 等的文件管理系统也使用了写时复制策略。
Java 中的 CopyOnWriteArrayList 采用 COW 策略实现了线程安全版的 ArrayList。
public class CopyOnWriteArrayList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable { // 同步锁 final transient ReentrantLock lock = new ReentrantLock(); // 私有数组，只能通过 getArray/setArray 发布 // 需要 volatile 修饰满足新数组赋值后的可见性 private transient volatile Object[] array; // final 禁止重写，避免逸出 final Object[] getArray() { return array; } // 同上 final void setArray(Object[] a) { array = a; } // 既然写入总是复制，初始化就没有确定数组大小的必要了 public CopyOnWriteArrayList() { setArray(new Object[0]); } .</description>
    </item>
    
    <item>
      <title>Java 并发：组合对象</title>
      <link>https://lil-q.github.io/blog/java%E5%B9%B6%E5%8F%91%E7%BB%84%E5%90%88%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Tue, 08 Jun 2021 17:48:11 +0800</pubDate>
      
      <guid>https://lil-q.github.io/blog/java%E5%B9%B6%E5%8F%91%E7%BB%84%E5%90%88%E5%AF%B9%E8%B1%A1/</guid>
      <description>【Java 并发】系列是对《Java Concurrency in Practice》的学习整理。
一、状态空间 首先要明确的是处理并发问题时，我们到底在保护什么？当然是一个对象中的 field。如果这些 field 都是基本类型（primitive）的，那么这些 field 就构成了这个对象的完整状态（state）；如果其中一个 field 指向另一个对象，那么这个状态应当还包括这个对象中的 field，以此类推。
所谓的保护就是要使每一个对象的状态保持在合理、安全的范围内，这个范围就是安全的状态空间（state space）。所以对于不会改动的 field，尽量使用 final 修饰使其不可变，这样可以减小状态空间，简化对对象可能状态的分析。分析包含两个部分：
 始终通过不变约束（invariant）来判断某种状态是否合法； 通过后验条件（postcondition）来判断某种状态转移（state transition）是否合法。  不变约束确定了一个 field 的范围，或者说状态空间。比如一个 int 类型的 field 就需要始终保持在 [Integer.MIN_VALUE, Integer.MAX_VALUE] 之间；而一些 field 又需要满足不能是负值。
所谓后验条件，就是在执行一段代码后必须成立的条件，这个条件只能在运行期确定。比如对一个计数量自增：count++，就需要一些同步策略（synchronization policy）保证这个操作的原子性，否则这个状态转移就是不安全的。
同步策略定义了对象如何协调对其状态的访问，并且不会违背他的不变约束和后验条件。它将不可变性、线程限制和锁结合起来，从而维护线程的安全性。为了不违背不变约束，通常用一个synchronazed 函数对 field 进行封装，保证再写入时不会变成一个非法的状态；为了不违背后验条件，涉及状态转移的操作必须满足原子性。
// 伪代码 public final class Counter { public AtomicLong count = new AtomicLong(0); // 保证其原子性以满足后验条件 private long value = 0; public synchronized long getValue() { return value; } public synchronized long increment() { // 用函数封装以满足不变约束 if (value == Long.</description>
    </item>
    
    <item>
      <title>Java 并发：共享对象</title>
      <link>https://lil-q.github.io/blog/threadsafety/</link>
      <pubDate>Mon, 07 Jun 2021 16:27:42 +0800</pubDate>
      
      <guid>https://lil-q.github.io/blog/threadsafety/</guid>
      <description>【Java 并发】系列是对《Java Concurrency in Practice》的学习整理。
一、发布和逸出 发布（publishing）对象就是使一个对象能够被外界代码使用。以下方式可以实现发布：
 将对象保存到共享区域（public static）； 使用一个 public 方法返回该对象； 通过其他类的方法传入该对象。  1.1 共享区域 想要发布对象到共享区域，先要初始化一个容器用于存放这些对象：
public static Set&amp;lt;Secret&amp;gt; knownSecrets; // 注意：存在风险 public void initialize() { knownSecrets = new HashSet&amp;lt;Secret&amp;gt;(); }  然后把对象加入到这个共享的容器中，但是通过这个容器，别的线程就可以很轻易地获得 Secret 并对其进行修改，这是不合理的。如果这些 Secret 是不可变对象，就很好的解决了这个问题。
1.2 public 方法 用 public 方法发布一个对象时，同样不应将 private 对象直接暴露出来：
class UnsafeStates { private String[] states = new String[] { &amp;quot;AK&amp;quot;, &amp;quot;AL&amp;quot; ...}; public String[] getStates() { return states; // 注意：存在风险 } }  更合理的方式应该是进行拷贝：</description>
    </item>
    
  </channel>
</rss>