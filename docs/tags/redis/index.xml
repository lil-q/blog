<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Homeward</title>
    <link>https://lil-q.github.io/tags/redis/</link>
    <description>Recent content in Redis on Homeward</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>{year} © lil-q</copyright>
    <lastBuildDate>Wed, 14 Oct 2020 20:36:54 +0800</lastBuildDate>
    
	<atom:link href="https://lil-q.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis：过期键淘汰策略</title>
      <link>https://lil-q.github.io/blog/redis2/</link>
      <pubDate>Wed, 14 Oct 2020 20:36:54 +0800</pubDate>
      
      <guid>https://lil-q.github.io/blog/redis2/</guid>
      <description>一、过期键的判定 redisDb 结构的 expires 字典保存了数据库中所有键的过期时间，我们称这个字典为过期字典：
 过期字典的键是一个指针，这个指针指向键空间中的某个键对象（即数据库键）； 过期字典的值是一个 longlong 类型的整数，这个整数保存了键所指向的数据库键的过期时间个毫秒精度的 UNIX 时间戳。  通过过期字典，程序可以用以下步骤检查一个给定键是否过期：
 检査给定键是否存在于过期字典：如果存在，那么取得键的过期时间； 检查当前 UNIX 时间戳是否大于键的过期时间：如果是的话，那么键已经过期；否则的话，键未过期。  二、过期键淘汰策略 常见的过期键淘汰策略有以下三种：
 定时删除：在设置键的过期时间的同时，创建一个定时器（timer），让定时器在键的过期时间来临时，立即执行对键的删除操作。 惰性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键；如果没有过期，就返回该键。 定期删除：每隔一段时间，程序就对数据库进行一次检査，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。  2.1 定时删除   优点：对内存最友好，定时器可以保证过期键尽快被删除，并释放过期键所占内存。
  缺点：对 CPU 时间最不友好，在过期键比较多的情况下，删除过期键这一行为可能会占用相当一部分 CPU 时间，会对服务器的响应时间和吞吐量造成影响。
  除此之外，创建一个定时器需要用到 Redis 服务器中的时间事件，而当前时间事件的实现方式——无序链表，查找一个事件的时间复杂度为 O(M) 并不能高效地处理大量时间事件。
因此，要让服务器创建大量的定时器，从而实现定时删除策略，在现阶段来说并不现实。
2.2 惰性删除  优点：对 CPU 时间最友好，程序只会在取出键时才对键进行过期检査，不会在删除其他无关的过期键上花费任何 CPU 时间。 缺点：对内存最不友好，如果一个键已经过期，而这个键又仍然保留在数据库中，那么只要这个过期键不被删除，它所占用的内存就不会释放。  在使用惰性删除策略时，如果数据库中有非常多的过期键，而这些过期键又正好没有被访问到的话，那么它们也许永远也不会被删除（除非用户手动执行 FLUSHDB），这可以看作是一种内存泄漏——无用的垃圾数据占用了大量的内存。
2.3 定期删除 由上述可知，定时删除和惰性删除实际上是两个极端。定时删除占用太多 CPU 时间，影响服务器的响应时间和吞吐量；惰性删除浪费太多内存，有内存泄漏的危险。
定期删除策略是前两种策略的一种整合和折中。定期删除策略每隔一段时间执行一次删除过期键操作，并通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。除此之外，通过定期删除过期键，定期删除策略有效地减少了因为过期键而带来的内存浪费。按照如下规则确定删除操作执行的时长和频率：
 如果删除操作执行得太频繁，或者执行的时间太长，定期删除策略就会退化成定时删除策略，以至于将 CPU 时间过多地消耗在删除过期键上面。 如果删除操作执行得太少，或者执行的时间太短，定期删除策略又会和惰性删除策略一样，出现浪费内存的情况。  因此，如果采用定期删除策略的话，服务器必须根据情况，合理地设置删除操作的执行时长和执行频率。</description>
    </item>
    
    <item>
      <title>Redis：数据结构</title>
      <link>https://lil-q.github.io/blog/redis/</link>
      <pubDate>Fri, 09 Oct 2020 18:17:27 +0800</pubDate>
      
      <guid>https://lil-q.github.io/blog/redis/</guid>
      <description>Redis 是一个使用 ANSI C 编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从 2015 年 6 月开始，Redis 的开发由 Redis Labs 赞助，而 2013 年 5 月至 2015 年 6 月期间，其开发由 Pivotal 赞助。在 2013 年 5 月之前，其开发由 VMware 赞助。根据月度排行网站 DB-Engines.com 的数据，Redis 是最流行的键值对存储数据库。本文将介绍 Redis 的数据结构及其底层实现。
Redis 中键的类型只能为字符串，值支持多种数据类型：
 字符串 - string； 列表 - list； 字典 - hash； 集合 - set； 有序集合 - sorted set； 其他还有范围查询，bitmap，hyperloglog 和地理空间（geospatial）索引半径查询。  一、简单动态字符串 Redis 没有直接使用 C 语言传统的字符串表示（以空字符结尾的字符数组，以下简称 C 字符串），而是自己构建了一种名为简单动态字符串（Simple Dynamic String，SDS）的抽象类型，并将 SDS 用作 Redis 的默认字符串表示。每一个 sds.h/sdshdr 结构体表示一个 SDS：</description>
    </item>
    
  </channel>
</rss>