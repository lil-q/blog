<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on Homeward</title>
    <link>https://lil-q.github.io/tags/web/</link>
    <description>Recent content in web on Homeward</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-{year} © lil-q</copyright>
    <lastBuildDate>Wed, 07 Oct 2020 20:30:35 +0800</lastBuildDate>
    
	<atom:link href="https://lil-q.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>I/O 模型</title>
      <link>https://lil-q.github.io/blog/io%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 07 Oct 2020 20:30:35 +0800</pubDate>
      
      <guid>https://lil-q.github.io/blog/io%E6%A8%A1%E5%9E%8B/</guid>
      <description>I/O（Input / Output），即输入／输出，通常指数据在存储器（内部和外部）或其他周边设备之间的输入和输出，是信息处理系统与外部世界之间的通信。输入是系统接收的信号或数据，输出则是从其发送的信号或数据。
大多数文件系统的默认 I/O 操作都是缓存 I/O，缓存 I/O 又被称作标准 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的页缓存（page cache）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。
数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。当一个 read 操作发生时，会经历两个阶段：
 等待数据准备（Waiting for the data to be ready）； 将数据从内核拷贝到进程中（Copying the data from the kernel to the process）。  对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。
一、I/O 模型 linux 系统下有五种网络模式的方案，其中信号驱动 I/O 使用较少，本文将介绍其余四种模型。
 阻塞 I/O（blocking IO） 非阻塞 I/O（nonblocking IO） I/O 多路复用（ IO multiplexing） 信号驱动 I/O（ signal driven IO） 异步 I/O（asynchronous IO）  在开始介绍之前，需要对文件描述符（File Descriptor）有一定认识：
 文件描述符是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于 UNIX、Linux 这样的操作系统。</description>
    </item>
    
    <item>
      <title>HTTP &amp; RESTful</title>
      <link>https://lil-q.github.io/blog/http-restful/</link>
      <pubDate>Thu, 23 Jul 2020 09:46:01 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/http-restful/</guid>
      <description>HyperText Transfer Protocol &amp;amp; REpresentational State Transfer
一、概述 超文本传输协议（HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。
表现层状态转换（REST）本身并没有创造新的技术、组件或服务，而隐藏在 RESTful 背后的理念就是使用 Web 的现有特征和能力， 更好地使用现有 Web 标准中的一些准则和约束。虽然 REST 本身受 Web 技术的影响很深， 但是理论上 REST 架构风格并不是绑定在 HTTP 上，只不过目前 HTTP 是唯一与 REST 相关的实例。
1.1 URI 统一资源标识符（Uniform Resource Identifier，URI）是一个用于标识某一互联网资源名称的字符串。URI的最常见的形式是统一资源定位符（Uniform Resource Locator，URL），经常指定为非正式的网址。更罕见的用法是统一资源名称（Uniform Resource Name，URN），其目的是通过提供一种途径。用于在特定的名字空间资源的标识，以补充网址。在RESTful架构中 URI 不应该有动词，动词应该放在HTTP协议中。
资源是一种信息实体，它可以有多种外在表现形式。“资源” 具体呈现出来的形式，叫做它的 &amp;ldquo;表现层&amp;rdquo;（Representation）。URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的 &amp;ldquo;.html&amp;rdquo; 后缀名是不必要的，因为这个后缀名表示格式，属于 &amp;ldquo;表现层&amp;rdquo; 范畴，而 URI 应该只代表 &amp;ldquo;资源&amp;rdquo; 的位置。它的具体表现形式，应该在 HTTP 请求的头信息中用 Accept 和 Content-Type 字段指定，这两个字段才是对 &amp;ldquo;表现层&amp;rdquo; 的描述。
因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个 URI。版本号可以在 HTTP 请求头信息的 Accept 字段中进行区分（参见Versioning REST Services ）：
1.2 如何理解 RESTful REST 本身受 Web 技术的影响很深，可以借助 WEB 来理解 RESTful。网站是采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点的一种软件。表现层（Representation）的含义是把资源具体的形式呈现出来。表现层上的网站交互就是客户端获取或修改服务器端储存的资源，而这些获取或修改的操作就是资源的状态转换。具体的实现很简单</description>
    </item>
    
    <item>
      <title>计算机网络</title>
      <link>https://lil-q.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Tue, 05 May 2020 19:30:17 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>网络把主机连接起来，而互连网（internet）是把多种不同的网络连接起来，因此互连网是网络的网络。
一、概述 1. 主机之间的通信方式   客户-服务器（C/S）：客户是服务的请求方，服务器是服务的提供方。
  对等（P2P）：不区分客户和服务器。
  2. 报文交换  电路交换：整个报文的比特流连续地从源点直达终点。 报文交换：整个报文存储到相邻结点并查找转发表不断跳转。 分组交换：单个分组存储到相邻结点并查找转发表不断跳转。  3. 时延 总时延 = 排队时延 + 处理时延 + 发送时延 + 传播时延：
（1）排队时延
分组在路由器的输入队列和输出队列中排队等待的时间，取决于网络当前的通信量。
（2）处理时延
主机或路由器收到分组时进行处理所需要的时间，例如分析首部、从分组中提取数据、进行差错检验或查找适当的路由等。
（3）发送时延
主机或路由器传输数据帧所需要的时间。
（4）传播时延
电磁波在信道中传播所需要花费的时间，电磁波传播的速度接近光速。
4. 体系结构   应用层 ：以报文为单位为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。
  传输层 ：为进程提供通用的数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。
以上为端到端，以下为点到点：
  网络层 ：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。
  数据链路层 ：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。
  物理层 ：考虑如何在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。
  （1）协议</description>
    </item>
    
  </channel>
</rss>