<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Homeward</title>
    <link>https://lil-q.github.io/tags/algorithm/</link>
    <description>Recent content in algorithm on Homeward</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019-{year} © lil-q</copyright>
    <lastBuildDate>Fri, 01 May 2020 14:51:08 +0000</lastBuildDate>
    
	<atom:link href="https://lil-q.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Morris 算法</title>
      <link>https://lil-q.github.io/blog/morris%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 01 May 2020 14:51:08 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/morris%E7%AE%97%E6%B3%95/</guid>
      <description>Morris 遍历利用的是树的叶节点左右孩子为空（树的大量空闲指针），实现空间开销的极限缩减。对于二叉树的遍历，通常采用递归或利用栈的迭代方法，两者的空间复杂度都为 $O\left ( N \right )$。Morris 遍历可以将非递归遍历中的空间复杂度降为 $O\left ( 1 \right )$。
前序遍历 以前序遍历为例子，比如 leecode 上的144. 二叉树的前序遍历 ，先给出代码：
class Solution { public List&amp;lt;Integer&amp;gt; preorderTraversal(TreeNode root) { List&amp;lt;Integer&amp;gt; res = new LinkedList&amp;lt;&amp;gt;(); TreeNode cur = root; // 当前处理节点 TreeNode tail = null; // tail记录当前节点左子树的最右节点 while (cur != null) { tail = cur.left; if (tail != null) { // 找到tail的位置 while (tail.right != null &amp;amp;&amp;amp; tail.right != cur) { tail = tail.</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>https://lil-q.github.io/blog/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 22 Apr 2020 20:42:19 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>一旦一个问题可以通过贪心法来解决，那么贪心法一般是解决这个问题的最好办法。
一、概述 贪心算法（greedy algorithm），是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。比如在旅行推销员问题 中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。
贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解。简单地说，问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。
贪心算法与动态规划的不同在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。
贪心法可以解决一些最优化问题，如：求图中的最小生成树 、求哈夫曼编码 ……对于其他问题，贪心法一般不能得到我们所要求的答案。一旦一个问题可以通过贪心法来解决，那么贪心法一般是解决这个问题的最好办法。由于贪心法的高效性以及其所求得的答案比较接近最优结果，贪心法也可以用作辅助算法或者直接解决一些要求结果不特别精确的问题。
二、流程  创建数学模型来描述问题； 把求解的问题分成若干个子问题； 对每一子问题求解，得到子问题的局部最优解； 把子问题的解局部最优解合成原来解问题的一个解。  三、题解 回溯算法，动态规划和贪心算法其实是循序渐进的。回溯算法即是暴力的枚举，每一步对所有可能都进行计算，计算到达终点即返回，每一步返回后都要把状态回归到之前的状态。回溯算法的痛点是他有很多重复的计算，解决的办法是引入备忘录，备忘录记录了每一步的结果，这其实就是子问题的最优解，动态规划由此产生。所以使用动态规划时必须要满足无后效性，子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。如果一个问题没有重叠子问题，那就只能使用回溯算法，比如 N 皇后问题 。
对于有些问题，我们通过建立数学模型之后明确知道了子问题的最优解，那么就不需要枚举各种情况了。比如有 5 元，2 元和 1 元三种硬币无限个，求用这些硬币兑换 x 元的最少硬币个数。解决这个问题总是先考虑最大面额的硬币，并不需要枚举。但是对于 5 元，4 元和 1 元这三个面额，贪心算法并不能得出最优解。
3.1 加油站 leetcode 134. 加油站 ：在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。
说明:
 如果题目有解，该答案即为唯一答案。 输入数组均为非空数组，且长度相同。 输入数组中的元素均为非负数。  示例:
输入: gas = [1,2,3,4,5] cost = [3,4,5,1,2] 输出: 3  这个问题的子问题是从第 i 个加油站出发，到达每个站的油量大于等于 0 ，则返回这个节点。</description>
    </item>
    
    <item>
      <title>回溯算法</title>
      <link>https://lil-q.github.io/blog/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 08 Mar 2020 13:12:02 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</guid>
      <description>“想回到过去，试着让故事继续”
回溯 回溯（backtracking）是暴力搜索法中的一种。
对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于约束满足问题。
 约束满足问题：在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解。
 回溯法采用试错的思想，它尝试分步的去解决一个问题。在分步执行的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将撤销上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案，找到答案即算法运行至终止条件。
回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：
 找到一个可能存在的正确的答案 在尝试了所有可能的分步方法后宣告该问题没有答案  在最坏的情况下，回溯法会导致一次复杂度为指数时间的计算。
典型的回溯 leetcode 46. 全排列 ：给定一个没有重复数字的序列，返回其所有可能的全排列。
示例:
输入: [1,2,3] 输出: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]  用比较通用的回溯算法可以这样解答：
class Solution: def permute(self, nums: List[int]) -&amp;gt; List[List[int]]: size = len(nums) res = [] # 记录已经选择过的数 visited = set() def backtrack(numList, visited): # 当所有数字都选完了，终止 if len(visited) == size: res.append(numList[:]) # 注意深拷贝和浅拷贝的问题 return # 遍历所有可能的选择 for i in range(size): # 如果这个数已在前面出现过了，跳过 if i in visited: continue visited.</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>https://lil-q.github.io/blog/%E6%8E%92%E5%BA%8F-sort-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 16 Nov 2019 19:34:55 +0000</pubDate>
      
      <guid>https://lil-q.github.io/blog/%E6%8E%92%E5%BA%8F-sort-%E7%AE%97%E6%B3%95/</guid>
      <description>十种排序算法的 python 实现及复杂度分析
分类 评价排序算法的几个指标：
 时间复杂度：包括平均时间复杂度、最坏时间复杂度和最好时间复杂度。一般而言，好的性能是 $O(nlog_2n)$，坏的性能是 $O(n^2)$。对于一个排序理想的性能是 $O(n)$，但平均而言不可能达到。基于比较的排序算法对大多数输入而言至少需要 $O(nlog_2n)$。 空间复杂度：内存使用量 稳定性： 稳定排序算法会让原本有相等键值的纪录维持相对次序。也就是如果一个排序算法是稳定的，当有两个相等键值的纪录 R 和 S，且在原本的列表中 R 出现在 S 之前，在排序过的列表中 R 也将会是在 S 之前。 依据排序的方法：插入、交换、选择、合并等等。  本文介绍了以下几种排序，推荐可视化网站 visualgo ，下文代码都采用数组作为输入。
   排序方法 平均时间复杂度 最坏时间复杂度 最好时间复杂度 空间复杂度 稳定性     冒泡
排序 $O(n^2)$ $O(n^2)$ $O(n)$ $O(1)$ 稳定   选择排序 $O(n^2)$ $O(n^2)$ $O(n^2)$ $O(1)$ 不稳定   插入排序 $O(n^2)$ $O(n^2)$ $O(n)$ $O(1)$ 稳定   堆排序 $O(nlog_2n)$ $O(nlog_2n)$ $O(nlog_2n)$ $O(1)$ 不稳定   归并排序 $O(nlog_2n)$ $O(nlog_2n)$ $O(nlog_2n)$ $O(n)$ 稳定   快速排序 $O(nlog_2n)$ $O(n^2)$ $O(nlog_2n)$ $O(log_2n)$ 不稳定   希尔排序 $O(n^{1.</description>
    </item>
    
  </channel>
</rss>